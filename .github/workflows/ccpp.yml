name: C/C++ CI
on: [push, pull_request]

jobs:

  build_source:
    name: Create source tarball
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.2
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libqt5-linguist-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - uses: actions/upload-artifact@v2
        with:
          name: release_source
          path: build/qtgiphy-*.tar.xz


  build_opensuse_lp152_qt5:
    name: Build openSUSE Leap 15.2 Qt 5
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.2
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libqt5-linguist-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON -DBUILD_WITH_QT5=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec
      - uses: actions/upload-artifact@v2
        with:
          name: release_opensuse_lp152_qt5
          path: /usr/src/packages/RPMS/*/qtgiphy*.*rpm


  build_opensuse_lp152_qt6:
    name: Build openSUSE Leap 15.2 Qt 6
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.2
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Add Qt 6 repo
        run: zypper -n ar -c -f -n 'repo-qt6' https://download.opensuse.org/repositories/home:/jonaski:/qt6/openSUSE_Leap_15.2/ repo-qt6
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            qt6-core-devel
            qt6-gui-devel
            qt6-widgets-devel
            qt6-concurrent-devel
            qt6-network-devel
            qt6-test-devel
            qt6-base-common-devel
            qt6-linguist-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON -DBUILD_WITH_QT6=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec


  build_opensuse_lp153_qt5:
    name: Build openSUSE Leap 15.3 Qt 5
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.3
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libqt5-linguist-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON -DBUILD_WITH_QT5=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec
      - uses: actions/upload-artifact@v2
        with:
          name: release_opensuse_lp153_qt5
          path: /usr/src/packages/RPMS/*/qtgiphy*.*rpm


  build_opensuse_lp153_qt6:
    name: Build openSUSE Leap 15.3 Qt 6
    runs-on: ubuntu-latest
    container:
      image: opensuse/leap:15.3
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Add Qt 6 repo
        run: zypper -n ar -c -f -n 'repo-qt6' https://download.opensuse.org/repositories/home:/jonaski:/qt6/openSUSE_Leap_15.3/ repo-qt6
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            qt6-core-devel
            qt6-gui-devel
            qt6-widgets-devel
            qt6-concurrent-devel
            qt6-network-devel
            qt6-test-devel
            qt6-base-common-devel
            qt6-linguist-devel
            libcdio-devel
            libgpod-devel
            libmtp-devel
            libchromaprint-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON -DBUILD_WITH_QT6=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec


  build_opensuse_tumbleweed_qt5:
    name: Build openSUSE Tumbleweed Qt 5
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Upgrade packages
        run: zypper --non-interactive --gpg-auto-import-keys dup
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            libQt5Core-devel
            libQt5Gui-devel
            libQt5Widgets-devel
            libQt5Concurrent-devel
            libQt5Network-devel
            libQt5DBus-devel
            libQt5Test-devel
            libqt5-qtbase-common-devel
            libqt5-linguist-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON -DBUILD_WITH_QT5=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec


  build_opensuse_tumbleweed_qt6:
    name: Build openSUSE Tumbleweed Qt 6
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Update packages
        run: zypper --non-interactive --gpg-auto-import-keys ref
      - name: Upgrade packages
        run: zypper --non-interactive --gpg-auto-import-keys dup
      - name: Install openSUSE dependencies
        run: >
            zypper --non-interactive --gpg-auto-import-keys install
            lsb-release
            rpm-build
            git
            tar
            make
            cmake
            gcc
            gcc-c++
            gettext-tools
            glibc-devel
            qt6-core-devel
            qt6-gui-devel
            qt6-widgets-devel
            qt6-concurrent-devel
            qt6-network-devel
            qt6-dbus-devel
            qt6-test-devel
            qt6-base-common-devel
            qt6-linguist-devel
            desktop-file-utils
            update-desktop-files
            appstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON -DBUILD_WITH_QT6=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz /usr/src/packages/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec


  build_fedora_32:
    name: Build Fedora 32
    runs-on: ubuntu-latest
    container:
      image: fedora:32
    env:
      RPM_BUILD_NCPUS: "2"
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Update packages
        run: yum update --assumeyes

      - name: Upgrade packages
        run: yum upgrade --assumeyes

      - name: Install Fedora dependencies
        run: >
            dnf install --assumeyes
            @development-tools
            redhat-lsb-core
            git
            glibc
            gcc-c++
            rpmdevtools
            make
            cmake
            pkgconfig
            man
            tar
            gettext
            openssh
            qt5-devel
            qt5-qtbase-devel
            qt5-qttools-devel
            desktop-file-utils
            libappstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        working-directory: build
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz ~/rpmbuild/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec
      - uses: actions/upload-artifact@v2
        with:
          name: release_fedora_32
          path: ~/rpmbuild/RPMS/*/qtgiphy*.*rpm


  build_fedora_33:
    name: Build Fedora 33
    runs-on: ubuntu-latest
    container:
      image: fedora:33
    env:
      RPM_BUILD_NCPUS: "2"
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Update packages
        run: yum update --assumeyes

      - name: Upgrade packages
        run: yum upgrade --assumeyes

      - name: Install Fedora dependencies
        run: >
            dnf install --assumeyes
            @development-tools
            redhat-lsb-core
            git
            glibc
            gcc-c++
            rpmdevtools
            make
            cmake
            pkgconfig
            man
            tar
            gettext
            openssh
            qt5-qtbase-devel
            qt5-qttools-devel
            desktop-file-utils
            libappstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        working-directory: build
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz ~/rpmbuild/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec
      - uses: actions/upload-artifact@v2
        with:
          name: release_fedora_33
          path: ~/rpmbuild/RPMS/*/qtgiphy*.*rpm


  build_fedora_34:
    name: Build Fedora 34
    runs-on: ubuntu-latest
    container:
      image: fedora:34
    env:
      RPM_BUILD_NCPUS: "2"
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Update packages
        run: yum update --assumeyes

      - name: Upgrade packages
        run: yum upgrade --assumeyes

      - name: Install Fedora dependencies
        run: >
            dnf install --assumeyes
            @development-tools
            redhat-lsb-core
            git
            glibc
            gcc-c++
            rpmdevtools
            make
            cmake
            pkgconfig
            man
            tar
            gettext
            openssh
            qt5-qtbase-devel
            qt5-qttools-devel
            desktop-file-utils
            libappstream-glib
            hicolor-icon-theme
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: Create source tarball
        working-directory: build
        run: ../dist/scripts/maketarball.sh
      - name: Create RPM build sources directories
        working-directory: build
        run: mkdir -p ~/rpmbuild/SOURCES /usr/src/packages/SOURCES
      - name: Copy source tarball
        working-directory: build
        run: cp qtgiphy-*.tar.xz ~/rpmbuild/SOURCES/
      - name: Build RPM
        working-directory: build
        run: rpmbuild -ba ../dist/unix/qtgiphy.spec
      - uses: actions/upload-artifact@v2
        with:
          name: release_fedora_34
          path: ~/rpmbuild/RPMS/*/qtgiphy*.*rpm


  build_debian_buster:
    name: Build Debian Buster
    runs-on: ubuntu-latest
    container:
      image: debian:buster
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Debian dependencies
        run: >
            apt-get update && apt-get install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            gcc
            pkg-config
            fakeroot
            gettext
            lsb-release
            dpkg-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb .
      - uses: actions/upload-artifact@v2
        with:
          name: release_debian_buster
          path: qtgiphy*.*deb


  build_debian_bullseye:
    name: Build Debian Bullseye
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Debian dependencies
        run: >
            apt-get update && apt-get install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            gcc
            pkg-config
            fakeroot
            gettext
            lsb-release
            dpkg-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb .
      - uses: actions/upload-artifact@v2
        with:
          name: release_debian_bulleye
          path: qtgiphy*.*deb


  build_ubuntu_bionic:
    name: Build Ubuntu Bionic
    runs-on: ubuntu-latest
    container:
      image: ubuntu:bionic
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            lsb-release
            dpkg-dev
            libboost-dev
            libdbus-1-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb .
      - uses: actions/upload-artifact@v2
        with:
          name: release_ubuntu_bionic
          path: qtgiphy*.*deb


  build_ubuntu_focal:
    name: Build Ubuntu Focal
    runs-on: ubuntu-latest
    container:
      image: ubuntu:focal
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            lsb-release
            dpkg-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb .
      - uses: actions/upload-artifact@v2
        with:
          name: release_ubuntu_focal
          path: qtgiphy*.*deb


  build_ubuntu_groovy:
    name: Build Ubuntu Groovy
    runs-on: ubuntu-latest
    container:
      image: ubuntu:groovy
    steps:
      - uses: actions/checkout@v1.2.0
      - name: Install Ubuntu dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
            apt-get update && apt-get install -y
            build-essential
            dh-make
            ssh
            git
            make
            cmake
            pkg-config
            gcc
            fakeroot
            wget
            curl
            gettext
            lsb-release
            dpkg-dev
            qtbase5-dev
            qtbase5-dev-tools
            qtbase5-private-dev
            qttools5-dev
      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build
      - name: Configure CMake
        shell: bash
        working-directory: build
        run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_WERROR=ON
      - name: make deb
        shell: bash
        run: dpkg-buildpackage -b -d -uc -us -nc -j2
      - name: move deb
        shell: bash
        run: mv ../*.deb .
      - uses: actions/upload-artifact@v2
        with:
          name: release_ubuntu_groovy
          path: qtgiphy*.*deb


  build-windows:
    name: Build Windows
    runs-on: ubuntu-latest
    container:
      image: jonaski/mxe-qt
    steps:
      - uses: actions/checkout@v1.2.0

      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build

      - name: Link MXE directory
        shell: bash
        run: ln -s /usr/src/mxe-qt ~/mxe-static

      - name: Run CMake
        shell: bash
        env:
          PKG_CONFIG_PATH: /usr/src/qtgiphy-mxe/usr/x86_64-w64-mingw32.static/lib/pkgconfig
        working-directory: build
        run: >
          cmake ..
          -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-x86_64-w64-mingw32-static.cmake
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_WERROR=ON
          -DENABLE_WIN32_CONSOLE=OFF

      - name: Run Make
        working-directory: build
        run: make -j2

      - uses: actions/upload-artifact@v2
        with:
          name: release_windows
          path: build/qtgiphy.exe


  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - build_source
      - build_opensuse_lp152_qt5
      - build_opensuse_lp153_qt5
      - build_fedora_32
      - build_fedora_33
      - build_fedora_34
      - build_debian_buster
      - build_debian_bullseye
      - build_ubuntu_bionic
      - build_ubuntu_focal
      - build_ubuntu_groovy
      - build-windows
    steps:
      - uses: actions/checkout@v1.2.0
      - uses: actions/download-artifact@v2
        with:
          path: release_artifacts
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          VERSION=$(echo release_artifacts/**/*.tar.xz | sed -e 's/.*qtgiphy-\(.*\).tar.xz/\1/')
          echo "Version: ${VERSION}"
          assets=()
          for asset in $(find release_artifacts -type f); do
            echo "Adding asset: ${asset}"
            assets+=("-a" "$asset")
          done
          args=
          if [ "$(echo "$VERSION" | sed 's/[^\.]//g' | wc -m)" -gt 3 ]; then
            args="-p"
          fi
          hub release create ${args} "${assets[@]}" -m "Qt Giphy $VERSION" -t "$GITHUB_SHA" "$VERSION"
